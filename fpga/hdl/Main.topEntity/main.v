/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.6.3. DO NOT MODIFY.
*/
`timescale 100fs/100fs
module main
    ( // Inputs
      input  clk_25mhz // clock
    , input  reset // reset
    , input  enable // enable
    , input [1:0] btn

      // Outputs
    , output wire [7:0] led
    );
  // src/ADC.hs:(33,1)-(34,44)
  reg [29:0] c$ds_app_arg = {8'd1,   21'd0,   1'b1};
  wire signed [63:0] x1;
  reg [7:0] c$case_alt;
  wire [7:0] c$case_alt_0;
  reg [7:0] c$case_alt_1;
  wire [7:0] c$case_alt_2;
  wire signed [63:0] c$$s$fBitsUnsigned_$crotateOut_app_arg;
  wire [7:0] c$case_alt_3;
  wire [7:0] c$case_alt_4;
  wire [7:0] result;
  wire [7:0] c$app_arg;
  wire  c$app_arg_0;
  wire [37:0] c$case_alt_5;
  // src/ADC.hs:12:1-3
  wire [7:0] leds;
  // src/ADC.hs:12:1-3
  wire [20:0] counter;
  // src/ADC.hs:12:1-3
  wire  ready;
  wire signed [63:0] c$case_alt_selection_res;
  wire signed [63:0] c$case_alt_selection_res_0;

  // register begin
  always @(posedge clk_25mhz or  posedge  reset) begin : c$ds_app_arg_register
    if ( reset) begin
      c$ds_app_arg <= {8'd1,   21'd0,   1'b1};
    end else if (enable) begin
      c$ds_app_arg <= c$case_alt_5[37:8];
    end
  end
  // register end

  assign led = c$case_alt_5[7:0];

  assign x1 = c$$s$fBitsUnsigned_$crotateOut_app_arg;

  assign c$case_alt_selection_res = (x1 < 64'sd0) ? 64'sd1 : 64'sd0;

  always @(*) begin
    case(c$case_alt_selection_res)
      64'sd1 : c$case_alt = c$case_alt_0;
      default : c$case_alt = c$case_alt_1;
    endcase
  end

  // rotateR begin
  wire [2*8-1:0] u;
  assign u = {leds,leds} >> (-(x1) % 8);
  assign c$case_alt_0 = u[8-1 : 0];
  // rotateR end

  assign c$case_alt_selection_res_0 = (x1 > 64'sd0) ? 64'sd1 : 64'sd0;

  always @(*) begin
    case(c$case_alt_selection_res_0)
      64'sd1 : c$case_alt_1 = c$case_alt_2;
      default : c$case_alt_1 = leds;
    endcase
  end

  // rotateL begin
  wire [2*8-1:0] u_0;
  assign u_0 = {leds,leds} << (c$$s$fBitsUnsigned_$crotateOut_app_arg % 8);
  assign c$case_alt_2 = u_0[2*8-1 : 8];
  // rotateL end

  assign c$$s$fBitsUnsigned_$crotateOut_app_arg = btn[1:1] ? -64'sd1 : 64'sd1;

  assign c$case_alt_3 = btn[0:0] ? c$case_alt : leds;

  assign c$case_alt_4 = btn[0:0] ? leds : c$case_alt;

  assign result = btn[1:1] ? c$case_alt_4 : c$case_alt_3;

  assign c$app_arg = ready ? result : leds;

  assign c$app_arg_0 = ready ? (~ (btn[1:1] | btn[0:0])) : (counter == 21'd0);

  assign c$case_alt_5 = {{c$app_arg,
                          counter + 21'd1,   c$app_arg_0},   leds};

  assign leds = c$ds_app_arg[29:22];

  assign counter = c$ds_app_arg[21:1];

  assign ready = c$ds_app_arg[0:0];


endmodule

